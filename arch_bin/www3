#!/usr/bin/env node

 /**
  * Module dependencies.
  */

 var app = require('../app');
 var debug = require('debug')('poolside:server');
 var http = require('http');
 var https = require('https');
 var fs = require('fs');

 /**
  * Get port from environment and store in Express.
  */
 var http_port = 3000;

 var port = normalizePort(process.env.PORT || http_port);
//  app.set('port', port);
 const cors = require('cors');

// use middleware
app.use(cors());

 /**
  * Create HTTP server.
  */

 var server = http.createServer(app);

 /**
  * Listen on provided port, on all network interfaces.
  */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

 /**
  * Normalize a port into a number, string, or false.
  */

 function normalizePort(val) {
   var port = parseInt(val, 10);

   if (isNaN(port)) {
     // named pipe
     return val;
   }

   if (port >= 0) {
     // port number
     return port;
   }

   return false;
 }

 /**
  * Event listener for HTTP server "error" event.
  */

 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }

   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }

 /**
  * Event listener for HTTP server "listening" event.
  */

 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }

/*https server settings start*/
/*
 * Create HTTPS options server.
 * */

var privateKey  = fs.readFileSync('../config/server.key', 'utf8');
var certificate = fs.readFileSync('../config/server.csr', 'utf8');
var credentials = {key: privateKey, cert: certificate};

var app2 = require('../app');
var https_port = 3443;
var port2 = normalizePort(process.env.PORT || https_port);
app2.set('port', port2);
var https_server = https.createServer(credentials, app2);
https_server.listen(port2);